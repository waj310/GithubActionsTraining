name: CI / Build / Push / Deploy (production)
'on':
  push:
    branches:
    - main
    - master
  pull_request:
    branches:
    - main
    - master
  workflow_dispatch: null
permissions:
  contents: read
  id-token: write
env:
  AWS_REGION: us-east-1
##  AWS_ACCOUNT_ID: "642137768226"
  ECR_REGISTRY: 642137768226.dkr.ecr.us-east-1.amazonaws.com 
  IMAGE_TAG: ${{ github.sha }}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
        - name: backend
          path: backend
        - name: frontend
          path: frontend
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Configure AWS (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Extract metadata for Docker build
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.ECR_REGISTRY }}/${{ matrix.service.name }}
    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.path }}
        file: ${{ matrix.service.path }}/Dockerfile
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ matrix.service.name }}:${{ env.IMAGE_TAG }},${{ env.ECR_REGISTRY }}/${{ matrix.service.name }}:latest
    - name: Image digest output
      run: echo "IMAGE=${{ env.ECR_REGISTRY }}/${{ matrix.service.name }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
  deploy-argocd:
    needs:
    - build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Install yq
      run: sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && sudo chmod +x /usr/local/bin/yq
    - name: Configure Git user
      run: git config user.name 'github-actions[bot]' && git config user.email 'github-actions[bot]@users.noreply.github.com'
   ## - name: Update K8s/Helm image tags
  ##  run: "\n# This step updates image tags in manifests/helm values that ArgoCD watches.\n# It looks for common locations and replaces image tags with the SHA built above.\nset -e\nIMAGE_TAG=\"${{ env.IMAGE_TAG }}\"\n# Replace in kustomize images (kustomization.yaml)\nfor svc in $(git ls-files | grep -E '(^|/)kustomization.yaml$' || true); do\n  yq e -i '(.. | select(has(\"image\"))) |= sub(\":[^:]+$\"; \":\" + strenv(IMAGE_TAG))' \"$svc\" || true\ndone\n# Replace image tags in Helm values files\nfor v in $(git ls-files | grep -E 'values\\.yaml$|values\\.yml$' || true); do\n  yq e -i '(.image.tag) |= strenv(IMAGE_TAG) // .' \"$v\" || true\ndone\ngit add -A || true\ngit commit -m \"ci: update images to ${IMAGE_TAG} [skip ci]\" || true\ngit push origin HEAD:main\n"
   ## - name: Trigger ArgoCD sync (option A - argocd CLI)
  ##     run: "\nif [ -n \"${{ secrets.ARGOCD_SERVER }}\" ] && [ -n \"${{ secrets.ARGOCD_PASSWORD }}\" ]; then\n  curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\n  chmod +x argocd-linux-amd64\n  ./argocd-linux-amd64 login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure\n  ./argocd-linux-amd64 app sync --all || true\nelse\n  echo \"Argocd credentials not provided; relying on ArgoCD auto-sync to pick changes.\"\nfi\n"
